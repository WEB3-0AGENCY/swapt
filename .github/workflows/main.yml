name: Release

on:
  push:
    tags:
      - "v[0-9]+.[0-9]+.[0-9]+*"

jobs: 
  build-server-linux:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout Code
      with: 
        path: server
        repository: Yakuhito/yakuSwap-server
        ref: master 
      uses: actions/checkout@v2

    - name: Clean
      run: chmod +x ./build_scripts/clean_linux.sh && ./build_scripts/clean_linux.sh
      working-directory: ${{ github.workspace }}/server

    - name: Set up Python 3.9
      uses: actions/setup-python@v2
      with:
        python-version: 3.9

    - name: Upgrade pip
      run: python -m pip install --upgrade pip

    - name: Run linux.sh
      run: chmod +x ./build_scripts/linux.sh && ./build_scripts/linux.sh
      working-directory: ${{ github.workspace }}/server

    - name: Upload to artifacts
      uses: actions/upload-artifact@v2
      with:
        name: Linux-Server
        path: ${{ github.workspace }}/server/dist/linux


  build-server-windows:
    runs-on: windows-latest

    steps:
    - name: Checkout Code
      with: 
        path: server
        repository: Yakuhito/yakuSwap-server
        ref: master 
      uses: actions/checkout@v2

    - name: Clean
      run: .\build_scripts\clean_windows.bat
      working-directory: ${{ github.workspace }}/server

    - name: Set up Python 3.9
      uses: actions/setup-python@v2
      with:
        python-version: 3.9

    - name: Upgrade pip
      run: python -m pip install --upgrade pip

    - name: Run windows.bat
      run: .\build_scripts\windows.bat
      working-directory: ${{ github.workspace }}/server

    - name: Upload to artifacts
      uses: actions/upload-artifact@v2
      with:
        name: Windows-Server
        path: ${{ github.workspace }}/server/dist/windows


  build-ui:  
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [windows-2019, ubuntu-18.04]
        include: 
        - os: ubuntu-18.04
          TARGET: linux     
        - os: windows-2019
          TARGET: windows

    steps:
    - name: Checkout
      uses: actions/checkout@v2 
      with:
        path: client

    - name: Checkout Flutter
      uses: actions/checkout@v2 
      with: 
        path: flutter
        repository: flutter/flutter 
        ref: master 
        # Shallow clones don't work; see https://github.com/flutter/flutter/issues/18532
        fetch-depth: 0

    - name: Add Flutter tags
      # Add tags, which are also necessary for version checks to work.
      run: git fetch origin +refs/tags/*:refs/tags/*
      working-directory: ${{ github.workspace }}/flutter

    - name: Add Flutter to path - Windows
      if: startsWith(matrix.os, 'windows')
      run: echo "$env:GITHUB_WORKSPACE\flutter\bin" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append

    - name: Add Flutter to path - Linux
      if: startsWith(matrix.os, 'ubuntu')
      run: echo "$GITHUB_WORKSPACE/flutter/bin" >> $GITHUB_PATH

    - name: Install Linux dependencies  
      if: startsWith(matrix.os, 'ubuntu')
      run: |
        sudo apt-get update
        sudo apt-get install -y libgtk-3-dev libx11-dev pkg-config cmake ninja-build libblkid-dev liblzma-dev

    - name: Enable desktop support  
      run: |
        flutter config --enable-linux-desktop 
        flutter config --enable-windows-desktop 

    - name: Build client
      run: |
        flutter create --platforms=windows,linux .
        flutter packages get  
        flutter build -v ${{matrix.TARGET}} --release 
      working-directory: ${{ github.workspace }}/client
    
    - name: Upload to artifacts (Linux)
      if: startsWith(matrix.os, 'ubuntu')
      uses: actions/upload-artifact@v2
      with:
        name: Linux-Client
        path: ${{ github.workspace }}/client/build/linux/x64/release/bundle

    - name: Upload to artifacts (Windows)
      if: startsWith(matrix.os, 'windows')
      uses: actions/upload-artifact@v2
      with:
        name: Windows-Client
        path: ${{ github.workspace }}/client/build/windows/runner/Release


  make-release:  
    runs-on: ubuntu-latest
    if: startsWith( github.ref, 'refs/tags/v') 
    needs: [build-server-linux, build-server-windows, build-ui]

    steps:
    - name: Get release version
      id: release_version
      run: |
        echo ::set-output name=TAG::${GITHUB_REF#refs/tags/}

    - name: Create directories
      run: |
        mkdir windows
        mkdir windows/client
        mkdir windows/server
        mkdir linux
        mkdir linux/client
        mkdir linux/server

    - name: Download Windows client
      uses: actions/download-artifact@v2
      with: 
        name: Windows-Client
        path: windows/client

    - name: Download Windows server
      uses: actions/download-artifact@v2
      with: 
        name: Windows-Server
        path: windows/server

    - name: Zip Windows folder
      run: zip -r windows.zip windows/*

    - name: Download Linux client
      uses: actions/download-artifact@v2
      with: 
        name: Linux-Client
        path: linux/client

    - name: Download Linux server
      uses: actions/download-artifact@v2
      with: 
        name: Linux-Server
        path: linux/server

    - name: Zip Linux folder
      run: zip -r linux.zip linux/*

    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.release_version.outputs.TAG }}
        release_name: Release ${{ steps.release_version.outputs.TAG }}
        draft: false
        prerelease: false

    - name: Upload Release Assets - Windows
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
        asset_path: ./windows.zip
        asset_name: Windows.zip
        asset_content_type: application/zip

    - name: Upload Release Assets - Linux
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
        asset_path: ./linux.zip
        asset_name: Linux.zip
        asset_content_type: application/zip
    